
#!/bin/bash

clear

# demo1 | Version: jan_16_2019-gyn

read -p "Project Name: " ID

if [ -d .*_${ID} ]; then
	tar -cf 2020-$ID-$(date +%d-%m)-bkp.tar.gz .*_$ID
	mv 2020-*-bkp.tar.gz $HOME
	# rm -rf .*_$ID
	else
    		mkdir -p .build_$ID
fi

# project build.
DIR_BUILD=.build_${ID}

width=$(xwininfo -root | awk '$1=="Width:" {print $2}')
height=$(xwininfo -root | awk '$1=="Height:" {print $2}')

# linaro toolchain gcc.
MIRROR_LINARO="https://releases.linaro.org/components/toolchain/binaries/"

# mirror: u-boot (universal bootloader).
MIRROR_UBOOT="https://gitlab.denx.de/u-boot/u-boot"

# get all versions of linaro gcc compiler.
versions=$(curl -s "$MIRROR_LINARO" | grep binaries)
versions=$(echo "${versions//}" | sed -e "s/<a href=\"\/components\/toolchain\/binaries\///g" | sed 's/\/"//g' | sort)

# GCC (arm-linux-gnueabihf).
gcc_arm(){ pkglist=""
  for pkg in $versions; do pkglist="$pkglist FALSE $pkg"; done

	choices=`zenity --title="Graphical Tool for CROSS Compile"\
		--width=$width --height=$height --text="Choose item:"\
                --list --column="Selected" --column="Linaro Toolchain Package"\
                --radiolist $pkglist --ok-label="Build Source" --cancel-label="Back" 2>/dev/null`

	if [ $? -eq 0 ]; then
                IFS="|"
        	for choice in $choices
        	do
			package=$(curl -s $MIRROR_LINARO$choice/arm-linux-gnueabihf/ | grep -E '*x86.*_arm-linux-gnueabihf.tar.xz"')
			package=$(echo $package | sed -e "s/<a href=\"\/components\/toolchain\/binaries\/"$choice"\/arm-linux-gnueabihf//g")
			package=${package%?};
			package=$(echo ${package// /} | cut -c 2-)
			cd $DIR_BUILD
			wget $MIRROR_LINARO$choice/arm-linux-gnueabihf/$package -q --show-progress
			tar -xvf $package
                        dir=$(ls -d */)
                        bin="bin/arm-linux-gnueabihf-"
                        pwd=$(pwd)
                        echo "CC=$pwd/$dir$bin" >> ~/.bash_profile

			# update: source ~/.bash_profile
			zenity --title="Config Manual" --width=500 --height=100\
				--warning --text "update this file: ~/.bash_profile and test GCC ARM support: ${CC}gcc --version"
				sleep 2
		done
	        IFS=""

        	else
            		sleep 1
        fi
}

# U-Boot.
uboot(){
	cd $DIR_BUILD
	git clone --progress --verbose $MIRROR_UBOOT
	cd u-boot/
	tag_list=`git tag | grep v2`
	choices=`zenity --title="Graphical Tool for CROSS Compile"\
        	--width=$width --height=$height\
                --text="Choose item:" --list --column="Selected" --column="U-Boot Tag Version"\
                --radiolist $tag_list`
	git checkout $choices -b tmp
	tag=$(git branch -v)
	echo "U-Boot Branch TAG: ${tag}"
	
  	# wget -c https://rcn-ee.com/repos/git/u-boot-patches/v2018.03/0001-am335x_evm-uEnv.txt-bootz-n-fixes.patch
  	# wget -c https://rcn-ee.com/repos/git/u-boot-patches/v2018.03/0002-U-Boot-BeagleBone-Cape-Manager.patch
	# Apply Patches.
  	# patch -p1 < 0001-am335x_evm-uEnv.txt-bootz-n-fixes.patch
  	# patch -p1 < 0002-U-Boot-BeagleBone-Cape-Manager.patch

	# Compile U-Boot.
  	# make ARCH=arm CROSS_COMPILE=${CC} distclean
  	# make ARCH=arm CROSS_COMPILE=${CC} am335x_evm_defconfig
  	# make ARCH=arm CROSS_COMPILE=${CC}
}

kernel(){
  cd $DIR_BUILD
  git clone https://github.com/RobertCNelson/bb-kernel
  # cd bb-kernel/
  # git checkout origin/am33x-v4.15 -b tmp
  # ./build_kernel.sh
}

# file system support.
fs_build(){
  cd $DIR_BUILD
  wget https://rcn-ee.com/rootfs/eewiki/minfs/debian-9.3-minimal-armhf-2017-12-09.tar.xz -q --show-progress
  tar xf debian-9.3-minimal-armhf-2017-12-09.tar.xz -C .
}

# main.
while true; do
	main=`/usr/bin/zenity --title="Build ARM Image for Beaglebone Black."\
		--width=$width --height=$height --list --column="Configure Packages:"\
		"ARM Cross Compiler: GCC" "Bootloader: U-Boot"\
      		"Linux Kernel" "Root File System"\
      		"Setup microSD card" "Install Kernel and Root File System" 2>/dev/null`

	case "${main}" in
		"ARM Cross Compiler: GCC") gcc_arm;;
		"Bootloader: U-Boot") uboot ;;
                "Linux Kernel") kernel ;;
		"Root File System") fs_build ;;
                "Setup microSD card") sdcard_build ;;
                "Install Kernel and Root File System") hack_build ;;
        	*)
		exit 1
	esac
done
