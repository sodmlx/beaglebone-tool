#!/bin/bash

clear

# demo1 | Version: fev_15_2020-gyn

echo -e "ARM Tool Beaglebone Black\n"
echo -e 'Project: https://github.com/sodmlx/beaglebone-tool\n'

read -p "Project Name: " ID

# update project folder.
update_project(){
        cd .*_${ID}
}

# backup project folder.
backup_project(){
        tar -cf 2020-$ID-$(date +%d-%m)-bkp.tar.gz .*_$ID
        mv 2020-*-bkp.tar.gz $HOME
        rm -rf .*_$ID
}

# check project name.
if [ -d .*_${ID} ]; then
	update_project
else
	mkdir -p .build_$ID && cd .*_${ID}
fi

# Project source.
DIR_BUILD=.build_${ID}

# Set the dialog width
WIDTH=$(xwininfo -root | awk '$1=="Width:" {print $2}')

# Set the dialog height
HEIGHT=$(xwininfo -root | awk '$1=="Height:" {print $2}')

# Linaro Toolchain GCC.
MIRROR_LINARO="https://releases.linaro.org/components/toolchain/binaries/"

# Universal Bootloader.
MIRROR_UBOOT="https://gitlab.denx.de/u-boot/u-boot"
UBOOT_NAME="u-boot"

# Debian Root File System.
MIRROR_DEB_FS="https://rcn-ee.com/rootfs/eewiki/minfs/"

# Linux Kernel.
MIRROR_KERNEL=""

# GCC (arm-linux-gnueabihf).
gcc_arm(){
  versions=$(curl -s "$MIRROR_LINARO" | grep binaries)
  versions=$(echo "${versions//}" | sed -e "s/<a href=\"\/components\/toolchain\/binaries\///g" | sed 's/\/"//g' | sort)

  pkglist=""
  for pkg in $versions; do pkglist="$pkglist FALSE $pkg"; done

	choices=`zenity --title="Graphical Tool for CROSS Compile"\
		--width=$WIDTH --height=$HEIGHT --text="Choose item:"\
                --list --column="Selected" --column="Linaro Toolchain Package"\
                --radiolist $pkglist --ok-label="Build Source" --cancel-label="Back" 2>/dev/null`

	if [ $? -eq 0 ]; then
                IFS="|"
        	for choice in $choices
        	do
			package=$(curl -s $MIRROR_LINARO$choice/arm-linux-gnueabihf/ | grep -E '*x86.*_arm-linux-gnueabihf.tar.xz"')
			package=$(echo $package | sed -e "s/<a href=\"\/components\/toolchain\/binaries\/"$choice"\/arm-linux-gnueabihf//g")
			package=${package%?};
			package=$(echo ${package// /} | cut -c 2-)
			cd $DIR_BUILD 2> /dev/null
			wget $MIRROR_LINARO$choice/arm-linux-gnueabihf/$package -q --show-progress
			tar -xvf $package
                        rm -f $package
			exit 1
			dir=$(ls -d */)
                        bin="bin/arm-linux-gnueabihf-"
                        pwd=$(pwd)
                        echo "CC=$pwd/$dir$bin" >> ~/.bash_profile

			# update: source ~/.bash_profile
			zenity --title="Config Manual" --width=500 --height=100\
				--warning --text "update this file: ~/.bash_profile and test GCC ARM support: ${CC}gcc --version"
				sleep 2
		done
	        IFS=""

        	else
            		sleep 1
        fi
}

# U-Boot.
uboot(){
	if [ -d ${UBOOT_NAME} ]; then
		echo -e "\nU-Boot Project Status [OK]\n"
        else
		echo -e "\nU-Boot Setup\n"
		git clone --progress --verbose $MIRROR_UBOOT
        	cd u-boot/
        	tag_list=$(git tag | grep v2)
        	echo $tag_list
		choices=`zenity --title="Graphical Tool for CROSS Compile"\
                	--width=$WIDTH --height=$HEIGHT\
                	--text="Choose item:" --list --column="Selected" --column="U-Boot Tag Version"\
                	--radiolist $tag_list`
			git checkout $choices -b tmp
        		tag=$(git branch -v)
	fi
}

# Linux Kernel.
kernel(){
  cd $DIR_BUILD
  git clone https://github.com/RobertCNelson/bb-kernel
  # cd bb-kernel/
  # git checkout origin/am33x-v4.15 -b tmp
  # ./build_kernel.sh
}

# RootFS.
file_system(){
  cd $DIR_BUILD
  DEB_FS_VERSIONS=$(curl -s $MIRROR_DEB_FS | sed -nr 's/(.*)href="?([^ ">]*).*/\2\n\1/; T; P; D;')
  choices=`zenity --title="Graphical Tool for CROSS Compile"\
                        --width=$WIDTH --height=$HEIGHT\
                        --text="Choose item:" --list --column="Selected" --column="Root File System"\
                        --radiolist $DEB_FS_VERSIONS`

  # wget https://rcn-ee.com/rootfs/eewiki/minfs/debian-9.3-minimal-armhf-2017-12-09.tar.xz -q --show-progress
  # tar xf debian-9.3-minimal-armhf-2017-12-09.tar.xz -C .
}

# main.
while true; do
	main=`/usr/bin/zenity --title="Build ARM Image for Beaglebone Black."\
		--width=$WIDTH --height=$HEIGHT --list --column="Configure Packages:"\
		"ARM Cross Compiler: GCC" "Bootloader: U-Boot"\
      		"Linux Kernel" "Root File System"\
      		"Setup microSD card" "Install Kernel and Root File System" 2>/dev/null`

	case "${main}" in
		"ARM Cross Compiler: GCC") gcc_arm;;
		"Bootloader: U-Boot") uboot ;;
                "Linux Kernel") kernel ;;
		"Root File System") file_system ;;
                "Setup microSD card") sdcard_build ;;
                "Install Kernel and Root File System") hack_build ;;
        	*)
		exit 1
	esac
done
